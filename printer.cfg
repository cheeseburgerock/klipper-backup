# This file contains common pin mappings for the BIGTREETECH SKR E3
# DIP. To use this config, the firmware should be compiled for the
# STM32F103 with a "28KiB bootloader" and USB communication. Also,
# select "Enable extra low-level configuration options" and configure
# "GPIO pins to set at micro-controller startup" to "!PC13".

# The "make flash" command does not work on the SKR E3 DIP. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR E3
# DIP with that SD card.

# See docs/Config_Reference.md for a description of parameters.

# Note: This board has a design flaw in its thermistor circuits that
# cause inaccurate temperatures (most noticeable at low temperatures).
[stepper_x]
step_pin: PC6
dir_pin: PB15
enable_pin: !PC7
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: 0
position_max: 235
homing_speed: 50
homing_retract_dist: 5
second_homing_speed: 10

[stepper_y]
step_pin: PB13
dir_pin: PB12
enable_pin: !PB14
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC0
position_endstop: 0
position_max: 235
homing_speed: 50
homing_retract_dist: 5
second_homing_speed: 10

[stepper_z]
step_pin: PB10
dir_pin: !PB2
enable_pin: !PB11
microsteps: 16
rotation_distance: 8
endstop_pin: ^PC15
position_endstop: 0.0
position_min: 0
position_max: 250 
homing_retract_dist: 5
second_homing_speed: 2

[extruder]
step_pin: PB0
dir_pin: PC5
enable_pin: !PB1
microsteps: 16
rotation_distance: 7.800
nozzle_diameter: 0.400
filament_diameter: 1.750
heater_pin: PC8
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0
smooth_time: 2
#control: pid
#pid_Kp: 21.527
#pid_Ki: 1.063
#pid_Kd: 108.982
min_temp: 0
max_temp: 260
max_extrude_only_distance: 500
max_extrude_only_velocity: 50
max_extrude_only_accel: 3000
pressure_advance: 0.06
pressure_advance_smooth_time: 0.04
min_extrude_temp: 170

[input_shaper]
shaper_freq_x: 28.64
shaper_freq_y: 34.46
shaper_type: zvd

[heater_bed]
heater_pin: PC9
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PC3
#control: pid
#pid_Kp: 54.027
#pid_Ki: 0.770
#pid_Kd: 948.182
min_temp: 0
max_temp: 130

[fan]
pin: PA8
kick_start_time: 0.1

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f103xe_36FFD8054158303227661857-if00



[printer]
kinematics: cartesian
max_velocity: 200
max_accel: 3500
max_accel_to_decel: 3500
square_corner_velocity: 5
max_z_accel: 100
max_z_velocity: 5


[static_digital_output usb_pullup_enable]
pins: !PC13







########################################
# TMC2208 configuration
########################################

[tmc2208 stepper_x]
uart_pin: PC10
run_current: 0.470
hold_current: 0.300
stealthchop_threshold: 999999

[tmc2208 stepper_y]
uart_pin: PC11
run_current: 0.560
hold_current: 0.300
stealthchop_threshold: 999999

[tmc2208 stepper_z]
uart_pin: PC12
run_current: 0.490
hold_current: 0.350
stealthchop_threshold: 999999

[tmc2208 extruder]
uart_pin: PD2
run_current: 0.450
hold_current: 0.350
stealthchop_threshold: 999999


 
########################################
# EXP1 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PA15, EXP1_3=PA9,   EXP1_5=PA10, EXP1_7=PB8, EXP1_9=<GND>,
    EXP1_2=PB6,  EXP1_4=<RST>, EXP1_6=PB9,  EXP1_8=PB7, EXP1_10=<5V>


[display]
lcd_type: st7920
cs_pin: EXP1_7
sclk_pin: EXP1_6
sid_pin: EXP1_8
encoder_pins: ^EXP1_5, ^EXP1_3
click_pin: ^!EXP1_2

[output_pin beeper]
pin: EXP1_1






[virtual_sdcard]
path: ~/gcode_files

[display_status]

[pause_resume]

[gcode_macro PAUSE]
description: Pause the actual running print
rename_existing: PAUSE_BASE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  PAUSE_BASE
  G91
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 


[gcode_macro RESUME]
description: Resume the actual running print
rename_existing: RESUME_BASE
gcode:
  ##### read E from pause macro #####
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  #### get VELOCITY parameter if specified ####
  {% if 'VELOCITY' in params|upper %}
    {% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  {%else %}
    {% set get_params = "" %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}  
  RESUME_BASE {get_params}

 
[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE


[gcode_macro M900]
gcode:
  SET_PRESSURE_ADVANCE ADVANCE={K}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [extruder]
#*# control = pid
#*# pid_kp = 15.791
#*# pid_ki = 0.697
#*# pid_kd = 89.415
#*#
#*# [heater_bed]
#*# control = pid
#*# pid_kp = 75.842
#*# pid_ki = 1.915
#*# pid_kd = 750.837

